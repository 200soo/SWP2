import pickle

dbfilename = 'test3_4.dat'

def readScoreDB():
    try:
        fH = open(dbfilename, 'rb')
    except FileNotFoundError as e:
        print("New DB: ", dbfilename)
        return []

    scdb = []
    try:
        scdb = pickle.load(fH)
    except:
        print("Empty DB: ", dbfilename)
    else:
        print("Open DB: ", dbfilename)
    fH.close()
    return scdb


# write the data into person db
def writeScoreDB(scdb):
    fH = open(dbfilename, 'wb')
    pickle.dump(scdb, fH)
    fH.close()


def doScoreDB(scdb):
    while(True):
        inputstr = (input("Score DB > "))
        if inputstr == "": continue
        parse = inputstr.split(" ")
        
        if parse[0] == 'add':
            record = {'Name':parse[1], 'Age':parse[2], 'Score':parse[3]}
            scdb += [record]
        
        elif parse[0] == 'del':
            for p in scdb:
                if p['Name'] == parse[1]:
                    scdb.remove(p)
        
        elif parse[0] == 'show':
            sortKey ='Name' if len(parse) == 1 else parse[1]
            showScoreDB(scdb, sortKey)
        
        elif parse[0] == 'find':
            if len(parse) == 2:
                for p in scdb:
                    if p['Name'] == parse[1]:
                        for attr in sorted(p):
                            print(attr + "=" + str(p[attr]), end=' ')
                        print()
            else:
                print('Please input again.')
        
        elif parse[0] == 'inc':
            if len(parse) == 3:
                for p in scdb:
                    if p['Name'] == parse[1]:
                        try:
                            p['Score'] = int(p['Score']) + int(parse[2])
                            break
                        except:
                            print('Please input again.')
                            break
                else:
                    print(parse[1] + ' is not exist in scdb.')
            else:
                print('Please input again.')
        
        elif parse[0] == 'quit':
            break
        
        else:
            print("Invalid command: " + parse[0])


def showScoreDB(scdb, keyname):
    for p in sorted(scdb, key=lambda person: person[keyname]):
        for attr in sorted(p):
            print(attr + "=" + str(p[attr]), end=' ')
        print()


def findScoreDB(scdb, keyName):
    for person in scdb:
        if person['Name'] == keyName:
            outScoreDB(person)
        else:
            continue
        print()

def incScoreDB(scdb, keyName, amout):
    for person in scdb:
        if person['Name'] == keyName:
            person['Score'] = str(int(person['Score']) + int(amout))
        else:
            continue


def outScoreDB(person):
    for attr in sorted(person):
        print(attr + "=" + person[attr], end=' ')



#실행장소
scoredb = readScoreDB()
doScoreDB(scoredb)
writeScoreDB(scoredb)
